#!/bin/bash

# Astro Server - Main Launcher Script
# Unified interface for all Astro Server operations

set -euo pipefail

# Script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
SCRIPTS_DIR="$SCRIPT_DIR/scripts"
ANSIBLE_DIR="$SCRIPT_DIR/ansible"
DOCS_DIR="$SCRIPT_DIR/docs"

# Colors (disabled if not a TTY or NO_COLOR set)
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
BOLD='\033[1m'
NC='\033[0m'
if [ -z "${NO_COLOR:-}" ] && [ -z "${ASTRO_NO_COLOR:-}" ] && [ -t 1 ]; then
    : # colors enabled
else
    RED=''; GREEN=''; YELLOW=''; BLUE=''; PURPLE=''; CYAN=''; WHITE=''; BOLD=''; NC=''
fi

# Version
VERSION="1.0.0"

print_banner() {
    echo -e "${PURPLE}${BOLD}"
    echo "    ╔═══════════════════════════════════════════════════════════════╗"
    echo "    ║                                                               ║"
    echo "    ║      🚀 ASTRO SERVER SECURITY TOOLKIT v$VERSION               ║"
    echo "    ║                                                               ║"
    echo "    ║           Enterprise Security Management Platform             ║"
    echo "    ║                                                               ║"
    echo "    ╚═══════════════════════════════════════════════════════════════╝"
    echo -e "${NC}"
}

print_usage() {
    cat << EOF
${BOLD}Usage:${NC} $0 [COMMAND] [OPTIONS]

${BOLD}COMMANDS:${NC}
  ${CYAN}harden${NC}              Interactive security hardening (single server)
  ${CYAN}report${NC}              Generate security status report
  ${CYAN}deploy${NC}              Deploy to multiple servers via Ansible
  ${CYAN}check${NC}               System compatibility check
  ${CYAN}update${NC}              Update Astro Server toolkit
  ${CYAN}version${NC}             Show version information
  ${CYAN}help${NC}                Show this help message

${BOLD}GLOBAL OPTIONS:${NC}
  --no-color            Disable colored output
  --no-jokes            Disable lighthearted messages during long operations
  --quiet               Reduce non-essential output

${BOLD}SINGLE SERVER OPERATIONS:${NC}
  $0 harden                    # Interactive hardening wizard
  $0 harden --profile web      # Apply web server profile
  $0 harden --config custom.conf  # Use custom configuration
  $0 report                    # Generate markdown security report
  $0 check                     # Verify system compatibility

${BOLD}MULTI-SERVER OPERATIONS:${NC}
  $0 deploy --inventory hosts  # Deploy to servers in inventory
  $0 deploy --limit web-servers # Deploy to specific group
  $0 deploy --check            # Dry run deployment
  $0 reports --all             # Generate reports for all servers

${BOLD}PROFILES:${NC}
  ${GREEN}minimal${NC}     - Basic security hardening
  ${YELLOW}balanced${NC}    - Recommended security settings (default)
  ${RED}aggressive${NC}  - High security with strict policies
  ${PURPLE}paranoid${NC}    - Maximum security (may impact usability)
  ${BLUE}web-server${NC}  - Optimized for web servers
  ${CYAN}database${NC}    - Optimized for database servers

${BOLD}EXAMPLES:${NC}
  $0 harden --profile aggressive
  $0 deploy --inventory production.hosts --limit web-servers
  $0 report --format json
  $0 check --verbose

${BOLD}DOCUMENTATION:${NC}
  Installation Guide: $DOCS_DIR/INSTALL.md
  Configuration:      $DOCS_DIR/STANDALONE-USAGE.md
  Changelog:          $SCRIPT_DIR/CHANGELOG.md

EOF
}

spinner() {
    local pid="$1"
    local delay=0.1
    local frames='|/-\'
    while kill -0 "$pid" 2>/dev/null; do
        for ((i=0; i<${#frames}; i++)); do
            printf " [%c]  " "${frames:i:1}"
            sleep "$delay"
            printf "\r"
        done
    done
    printf "      \r"
}

with_quips() {
    [ -n "${ASTRO_NO_JOKES:-}" ] && return 0
    local pid="$1" i=0
    local -a quips=(
        "Compiling security. Please stand by while entropy accumulates..."
        "Brute-forcers hate this one weird trick."
        "Deploying phasers to stun. Shields at 100%."
        "Upgrading packages: because unpatched is just another word for adventure."
        "Beep boop: applying best practices so you don’t have to."
    )
    while kill -0 "$pid" 2>/dev/null; do
        sleep 12
        echo -e "${YELLOW}${quips[i % ${#quips[@]}]}${NC}"
        ((i++))
    done
}

ensure_script() {
    local path="$1"
    if [ ! -f "$path" ]; then
        echo -e "${RED}❌ Required script not found: $path${NC}"
        return 1
    fi
    if [ ! -x "$path" ]; then
        chmod +x "$path" 2>/dev/null || true
    fi
}

ask_yes_no() {
    local question="$1" default_ans="${2:-n}" response
    if [ "$default_ans" = "y" ]; then
        echo -e "${YELLOW}${BOLD}❓ ${question} [Y/n]:${NC} \c"
    else
        echo -e "${YELLOW}${BOLD}❓ ${question} [y/N]:${NC} \c"
    fi
    read -r response || response=""
    [ -z "$response" ] && response="$default_ans"
    case "$response" in
        [yY]|[yY][eE][sS]) return 0 ;;
        *) return 1 ;;
    esac
}

check_dependencies() {
    local missing_deps=()
    
    # Check for required commands
    command -v sudo >/dev/null 2>&1 || missing_deps+=("sudo")
    
    if [ ${#missing_deps[@]} -ne 0 ]; then
        echo -e "${RED}❌ Missing dependencies: ${missing_deps[*]}${NC}"
        return 1
    fi
    
    return 0
}

preflight_harden_notice() {
    echo -e "${YELLOW}⚠️  Safety tip:${NC} Keep your current SSH session open. Ensure your user has a working SSH key in ~/.ssh/authorized_keys before disabling passwords."
    local ak_file="$HOME/.ssh/authorized_keys"
    if [ -f "$ak_file" ] && [ -s "$ak_file" ]; then
        echo -e "${GREEN}✅ SSH key(s) detected for user $(whoami).${NC}"
    else
        echo -e "${RED}❌ No SSH keys found in $ak_file${NC}"
        echo -e "${BLUE}💡 Add a key (from your local machine):${NC} ssh-copy-id -i ~/.ssh/yourkey.pub $(whoami)@$(hostname -f 2>/dev/null || hostname)"
        ask_yes_no "Proceed anyway?" "n" || { echo -e "${YELLOW}Aborting hardening by user choice.${NC}"; exit 1; }
    fi
}

check_permissions() {
    if [ "$EUID" -eq 0 ]; then
        echo -e "${RED}❌ Don't run as root. Use a sudo-enabled user instead.${NC}"
        return 1
    fi
    
    if ! sudo -n true 2>/dev/null; then
        echo -e "${YELLOW}⚠️  This requires sudo privileges. You may be prompted for your password.${NC}"
        sudo -v || {
            echo -e "${RED}❌ Failed to obtain sudo privileges${NC}"
            return 1
        }
    fi
    
    return 0
}

run_harden() {
    local profile=""
    local config=""
    
    # Parse harden options
    while [[ $# -gt 0 ]]; do
        case $1 in
            --profile)
                profile="$2"
                shift 2
                ;;
            --config)
                config="$2"
                shift 2
                ;;
            *)
                echo -e "${RED}❌ Unknown option: $1${NC}"
                return 1
                ;;
        esac
    done
    
    echo -e "${CYAN}🛡️  Starting security hardening...${NC}"
    preflight_harden_notice
    ensure_script "$SCRIPTS_DIR/Astro-server.sh" || return 1
    
    if [ -n "$profile" ]; then
        echo -e "${BLUE}📋 Using profile: $profile${NC}"
        "$SCRIPTS_DIR/Astro-server.sh" --profile "$profile"
    elif [ -n "$config" ]; then
        echo -e "${BLUE}📋 Using config: $config${NC}"
        "$SCRIPTS_DIR/Astro-server.sh" --config "$config"
    else
        "$SCRIPTS_DIR/Astro-server.sh"
    fi
}

run_report() {
    echo -e "${CYAN}📊 Generating security report...${NC}"
    ensure_script "$SCRIPTS_DIR/security-report.sh" || return 1
    "$SCRIPTS_DIR/security-report.sh" "$@"
}

run_deploy() {
    if ! command -v ansible-playbook >/dev/null 2>&1; then
        echo -e "${RED}❌ Ansible not found. Please install Ansible first.${NC}"
        echo -e "${YELLOW}💡 Install with: sudo apt install ansible${NC}"
        return 1
    fi
    
    local inventory="$ANSIBLE_DIR/inventory/hosts"
    local extra_args=()
    
    # Parse deploy options
    while [[ $# -gt 0 ]]; do
        case $1 in
            --inventory)
                inventory="$2"
                shift 2
                ;;
            --limit)
                extra_args+=("--limit" "$2")
                shift 2
                ;;
            --check)
                extra_args+=("--check")
                shift
                ;;
            *)
                echo -e "${RED}❌ Unknown option: $1${NC}"
                return 1
                ;;
        esac
    done
    
    if [ ! -f "$inventory" ]; then
        echo -e "${RED}❌ Inventory file not found: $inventory${NC}"
        echo -e "${YELLOW}💡 Copy from: $ANSIBLE_DIR/inventory/hosts.example${NC}"
        return 1
    fi
    
    echo -e "${CYAN}🚀 Deploying to multiple servers...${NC}"
    ansible-playbook -i "$inventory" "$ANSIBLE_DIR/playbooks/harden-servers.yml" "${extra_args[@]}"
}

run_check() {
    echo -e "${CYAN}🔍 Running comprehensive system compatibility check...${NC}"
    echo
    
    # Check OS and distribution
    echo -e "${BLUE}${BOLD}📋 Operating System Information:${NC}"
    if [ -f /etc/os-release ]; then
        . /etc/os-release
        echo -e "  ${WHITE}Distribution:${NC} ${GREEN}$PRETTY_NAME${NC}"
        echo -e "  ${WHITE}Version:${NC} ${CYAN}${VERSION_ID:-Unknown}${NC}"
        echo -e "  ${WHITE}Codename:${NC} ${CYAN}${VERSION_CODENAME:-N/A}${NC}"
        
        # Enhanced OS compatibility check
        case "$ID" in
            # Debian-based distributions
            ubuntu|debian|linuxmint|pop|elementary|kali|parrot|mx|devuan|deepin|zorin|peppermint|sparkylinux|bunsenlabs|crunchbangplusplus)
                echo -e "  ${GREEN}✅ Fully supported - Debian-based distribution${NC}"
                ;;
            # Fedora-based distributions
            fedora|rhel|centos|rocky|alma|oracle|amazon|scientific|clear|qubes|nobara|ultramarine|korora|chapeau|berry)
                echo -e "  ${GREEN}✅ Fully supported - Fedora/RHEL-based distribution${NC}"
                ;;
            # Arch-based distributions
            arch|manjaro|endeavouros|garuda|arcolinux|artix|blackarch|parabola|hyperbola|chakra|antergos)
                echo -e "  ${YELLOW}⚠️  Experimental support - Arch-based distribution${NC}"
                ;;
            # Alpine
            alpine)
                echo -e "  ${YELLOW}⚠️  Experimental support - Alpine Linux${NC}"
                ;;
            # macOS detection
            darwin)
                echo -e "  ${RED}❌ Incompatible - macOS detected${NC}"
                echo -e "  ${YELLOW}💡 Astro Server is designed for Linux systems only${NC}"
                echo -e "  ${BLUE}💡 Consider using a Linux VM or WSL for Windows${NC}"
                ;;
            *)
                echo -e "  ${RED}❌ Unsupported distribution: $ID${NC}"
                echo -e "  ${YELLOW}💡 This distribution may not be fully compatible${NC}"
                ;;
        esac
    else
        echo -e "  ${RED}❌ Cannot determine OS - /etc/os-release not found${NC}"
        # Fallback OS detection
        if command -v uname >/dev/null 2>&1; then
            OS_TYPE=$(uname -s)
            echo -e "  ${WHITE}Detected OS:${NC} ${YELLOW}$OS_TYPE${NC}"
            if [ "$OS_TYPE" = "Darwin" ]; then
                echo -e "  ${RED}❌ Incompatible - macOS detected${NC}"
            fi
        fi
    fi
    
    # Check kernel information
    echo -e "${BLUE}${BOLD}🐧 Kernel Information:${NC}"
    if command -v uname >/dev/null 2>&1; then
        KERNEL_VERSION=$(uname -r)
        KERNEL_NAME=$(uname -s)
        echo -e "  ${WHITE}Kernel:${NC} ${CYAN}$KERNEL_NAME $KERNEL_VERSION${NC}"
    fi
    
    # Check architecture
    echo -e "${BLUE}${BOLD}🏗️  System Architecture:${NC}"
    ARCH=$(uname -m)
    case "$ARCH" in
        x86_64|amd64)
            echo -e "  ${GREEN}✅ Architecture: $ARCH (64-bit)${NC}"
            ;;
        aarch64|arm64)
            echo -e "  ${GREEN}✅ Architecture: $ARCH (ARM 64-bit)${NC}"
            ;;
        armv7l|armv6l)
            echo -e "  ${YELLOW}⚠️  Architecture: $ARCH (ARM 32-bit) - Limited testing${NC}"
            ;;
        i386|i686)
            echo -e "  ${YELLOW}⚠️  Architecture: $ARCH (32-bit) - Limited testing${NC}"
            ;;
        *)
            echo -e "  ${YELLOW}⚠️  Untested architecture: $ARCH${NC}"
            ;;
    esac
    
    # Check system resources
    echo -e "${BLUE}${BOLD}💾 Storage Information:${NC}"
    if command -v df >/dev/null 2>&1; then
        # Get root filesystem info
        ROOT_INFO=$(df / | tail -1)
        TOTAL_KB=$(echo "$ROOT_INFO" | awk '{print $2}')
        USED_KB=$(echo "$ROOT_INFO" | awk '{print $3}')
        AVAILABLE_KB=$(echo "$ROOT_INFO" | awk '{print $4}')
        USAGE_PERCENT=$(echo "$ROOT_INFO" | awk '{print $5}' | sed 's/%//')
        
        # Convert to human readable
        TOTAL_GB=$((TOTAL_KB / 1024 / 1024))
        USED_GB=$((USED_KB / 1024 / 1024))
        AVAILABLE_GB=$((AVAILABLE_KB / 1024 / 1024))
        
        echo -e "  ${WHITE}Total:${NC} ${CYAN}${TOTAL_GB}GB${NC}"
        echo -e "  ${WHITE}Used:${NC} ${CYAN}${USED_GB}GB${NC}"
        echo -e "  ${WHITE}Available:${NC} ${CYAN}${AVAILABLE_GB}GB${NC}"
        echo -e "  ${WHITE}Usage:${NC} ${CYAN}${USAGE_PERCENT}%${NC}"
        
        # Check if sufficient space (at least 1GB available)
        if [ "$AVAILABLE_KB" -gt 1048576 ]; then  # 1GB in KB
            echo -e "  ${GREEN}✅ Sufficient disk space for operations${NC}"
        else
            echo -e "  ${YELLOW}⚠️  Low disk space - consider freeing up space${NC}"
        fi
    else
        echo -e "  ${RED}❌ Cannot check disk space - df command not available${NC}"
    fi
    
    # Check memory
    echo -e "${BLUE}${BOLD}🧠 Memory Information:${NC}"
    if [ -f /proc/meminfo ]; then
        TOTAL_MEM=$(grep MemTotal /proc/meminfo | awk '{print $2}')
        AVAILABLE_MEM=$(grep MemAvailable /proc/meminfo | awk '{print $2}')
        TOTAL_MB=$((TOTAL_MEM / 1024))
        AVAILABLE_MB=$((AVAILABLE_MEM / 1024))
        
        echo -e "  ${WHITE}Total RAM:${NC} ${CYAN}${TOTAL_MB}MB${NC}"
        echo -e "  ${WHITE}Available RAM:${NC} ${CYAN}${AVAILABLE_MB}MB${NC}"
        
        if [ "$AVAILABLE_MB" -gt 512 ]; then
            echo -e "  ${GREEN}✅ Sufficient memory for operations${NC}"
        else
            echo -e "  ${YELLOW}⚠️  Low memory - may affect performance${NC}"
        fi
    else
        echo -e "  ${YELLOW}⚠️  Cannot check memory - /proc/meminfo not available${NC}"
    fi
    
    # Check dependencies
    echo -e "${BLUE}${BOLD}🔧 Dependency Check:${NC}"
    check_dependencies && echo -e "  ${GREEN}✅ All required dependencies available${NC}"
    
    # Check permissions
    echo -e "${BLUE}${BOLD}🔐 Permission Check:${NC}"
    check_permissions && echo -e "  ${GREEN}✅ Sudo access confirmed${NC}"
    
    # Check if running in container
    echo -e "${BLUE}${BOLD}📦 Container Check:${NC}"
    if [ -f /.dockerenv ] || grep -q docker /proc/1/cgroup 2>/dev/null; then
        echo -e "  ${YELLOW}⚠️  Running in Docker container${NC}"
        echo -e "  ${BLUE}💡 Some features may be limited in containerized environments${NC}"
    elif [ -f /run/.containerenv ]; then
        echo -e "  ${YELLOW}⚠️  Running in container (Podman/CRI-O)${NC}"
    else
        echo -e "  ${GREEN}✅ Running on bare metal or VM${NC}"
    fi
    
    echo
    echo -e "${GREEN}🎉 System check complete!${NC}"
    echo -e "${BLUE}💡 For detailed security analysis, run: ${WHITE}$0 report${NC}"
}

run_update() {
    echo -e "${CYAN}🔄 Updating Astro Server toolkit...${NC}"
    
    if [ -d "$SCRIPT_DIR/.git" ]; then
        echo -e "${BLUE}📥 Pulling latest changes...${NC}"
        cd "$SCRIPT_DIR"
        git pull --ff-only origin main
        echo -e "${GREEN}✅ Update complete!${NC}"
    else
        echo -e "${YELLOW}⚠️  Not a git repository. Manual update required.${NC}"
        echo -e "${BLUE}💡 Download latest version from: https://github.com/xploz1on/astro-tech${NC}"
    fi
}

show_version() {
    echo -e "${BOLD}Astro Server Security Toolkit${NC}"
    echo -e "Version: ${GREEN}$VERSION${NC}"
    echo -e "Path: ${BLUE}$SCRIPT_DIR${NC}"
    echo
    echo -e "${BOLD}Components:${NC}"
    echo -e "  Scripts: ${CYAN}$(ls -1 "$SCRIPTS_DIR"/*.sh 2>/dev/null | wc -l) files${NC}"
    echo -e "  Configs: ${CYAN}$(find "$SCRIPT_DIR/configs" -name "*.conf" 2>/dev/null | wc -l) templates${NC}"
    echo -e "  Ansible: ${CYAN}$(ls -1 "$ANSIBLE_DIR/playbooks"/*.yml 2>/dev/null | wc -l) playbooks${NC}"
}

show_interactive_menu() {
    local choice
    local profile=""
    local config=""
    
    while true; do
        echo
        echo -e "${CYAN}${BOLD}╔═══════════════════════════════════════════════════════════════╗${NC}"
        echo -e "${CYAN}${BOLD}║                    🛡️  ASTRO SERVER MENU                    ║${NC}"
        echo -e "${CYAN}${BOLD}╚═══════════════════════════════════════════════════════════════╝${NC}"
        echo
        echo -e "${WHITE}${BOLD}Available Operations:${NC}"
        echo -e "  ${GREEN}1)${NC} 🛡️  ${CYAN}Harden Server${NC}          - Interactive security hardening"
        echo -e "  ${GREEN}2)${NC} 📊 ${CYAN}Generate Report${NC}         - Security status report"
        echo -e "  ${GREEN}3)${NC} 🚀 ${CYAN}Deploy to Multiple${NC}      - Deploy via Ansible"
        echo -e "  ${GREEN}4)${NC} 🔍 ${CYAN}System Check${NC}            - Compatibility verification"
        echo -e "  ${GREEN}5)${NC} 🔄 ${CYAN}Update Toolkit${NC}          - Update Astro Server"
        echo -e "  ${GREEN}6)${NC} ℹ️  ${CYAN}Version Info${NC}            - Show version details"
        echo -e "  ${GREEN}7)${NC} ❓ ${CYAN}Help${NC}                     - Show detailed help"
        echo -e "  ${GREEN}0)${NC} 🚪 ${CYAN}Exit${NC}                     - Exit Astro Server"
        echo
        echo -e "${YELLOW}${BOLD}Quick Profiles:${NC}"
        echo -e "  ${GREEN}w)${NC} 🌐 ${CYAN}Web Server${NC}              - Optimized for web servers"
        echo -e "  ${GREEN}d)${NC} 🗄️  ${CYAN}Database Server${NC}        - Optimized for databases"
        echo -e "  ${GREEN}a)${NC} ⚡ ${CYAN}Aggressive${NC}               - High security settings"
        echo -e "  ${GREEN}p)${NC} 🔒 ${CYAN}Paranoid${NC}                 - Maximum security"
        echo
        echo -e "${BLUE}💡 Tip: You can also use command line arguments like:${NC}"
        echo -e "   ${WHITE}$0 harden --profile web${NC}"
        echo -e "   ${WHITE}$0 deploy --inventory hosts${NC}"
        echo
        echo -e "${YELLOW}${BOLD}Enter your choice:${NC} \c"
        read -r choice
        
        case "$choice" in
            1)
                echo -e "${CYAN}🛡️  Starting interactive hardening...${NC}"
                preflight_harden_notice
                ensure_script "$SCRIPTS_DIR/Astro-server.sh" || continue
                "$SCRIPTS_DIR/Astro-server.sh"
                break
                ;;
            2)
                echo -e "${CYAN}📊 Generating security report...${NC}"
                ensure_script "$SCRIPTS_DIR/security-report.sh" || continue
                "$SCRIPTS_DIR/security-report.sh"
                break
                ;;
            3)
                if ! command -v ansible-playbook >/dev/null 2>&1; then
                    echo -e "${RED}❌ Ansible not found. Please install Ansible first.${NC}"
                    echo -e "${YELLOW}💡 Install with: sudo apt install ansible${NC}"
                    echo -e "${YELLOW}Press Enter to continue...${NC}"
                    read -r
                    continue
                fi
                
                local inventory="$ANSIBLE_DIR/inventory/hosts"
                if [ ! -f "$inventory" ]; then
                    echo -e "${RED}❌ Inventory file not found: $inventory${NC}"
                    echo -e "${YELLOW}💡 Copy from: $ANSIBLE_DIR/inventory/hosts.example${NC}"
                    echo -e "${YELLOW}Press Enter to continue...${NC}"
                    read -r
                    continue
                fi
                
                echo -e "${CYAN}🚀 Deploying to multiple servers...${NC}"
                ansible-playbook -i "$inventory" "$ANSIBLE_DIR/playbooks/harden-servers.yml"
                break
                ;;
            4)
                echo -e "${CYAN}🔍 Running system compatibility check...${NC}"
                echo
                run_check
                echo -e "${YELLOW}Press Enter to continue...${NC}"
                read -r
                continue
                ;;
            5)
                echo -e "${CYAN}🔄 Updating Astro Server toolkit...${NC}"
                run_update
                echo -e "${YELLOW}Press Enter to continue...${NC}"
                read -r
                continue
                ;;
            6)
                show_version
                echo -e "${YELLOW}Press Enter to continue...${NC}"
                read -r
                continue
                ;;
            7)
                print_usage
                echo -e "${YELLOW}Press Enter to continue...${NC}"
                read -r
                continue
                ;;
            0)
                echo -e "${GREEN}👋 Thanks for using Astro Server!${NC}"
                exit 0
                ;;
            w)
                echo -e "${CYAN}🌐 Starting web server hardening...${NC}"
                preflight_harden_notice
                ensure_script "$SCRIPTS_DIR/Astro-server.sh" || continue
                "$SCRIPTS_DIR/Astro-server.sh" --profile web
                break
                ;;
            d)
                echo -e "${CYAN}🗄️  Starting database server hardening...${NC}"
                preflight_harden_notice
                ensure_script "$SCRIPTS_DIR/Astro-server.sh" || continue
                "$SCRIPTS_DIR/Astro-server.sh" --profile database
                break
                ;;
            a)
                echo -e "${CYAN}⚡ Starting aggressive hardening...${NC}"
                preflight_harden_notice
                ensure_script "$SCRIPTS_DIR/Astro-server.sh" || continue
                "$SCRIPTS_DIR/Astro-server.sh" --profile aggressive
                break
                ;;
            p)
                echo -e "${CYAN}🔒 Starting paranoid hardening...${NC}"
                preflight_harden_notice
                ensure_script "$SCRIPTS_DIR/Astro-server.sh" || continue
                "$SCRIPTS_DIR/Astro-server.sh" --profile paranoid
                break
                ;;
            *)
                echo -e "${RED}❌ Invalid choice. Please try again.${NC}"
                sleep 1
                ;;
        esac
    done
}

# Main execution
main() {
    # Global options
    local QUIET=""
    while [[ $# -gt 0 ]]; do
        case "$1" in
            --no-color)
                NO_COLOR=1; ASTRO_NO_COLOR=1; export NO_COLOR ASTRO_NO_COLOR; shift ;;
            --no-jokes)
                ASTRO_NO_JOKES=1; export ASTRO_NO_JOKES; shift ;;
            --quiet)
                QUIET=1; shift ;;
            harden|report|deploy|check|update|version|--version|-v|help|--help|-h)
                break ;;
            *)
                break ;;
        esac
    done

    trap 'echo -e "${RED}❌ An error occurred. Review the output above. For SSH recovery, if needed: sudo cp /etc/ssh/sshd_config.backup.* /etc/ssh/sshd_config && sudo systemctl restart ssh${NC}"' ERR

    # Check if no arguments provided
    if [ $# -eq 0 ]; then
        print_banner
        show_interactive_menu
        exit 0
    fi
    
    # Parse main command
    case "$1" in
        harden)
            shift
            check_dependencies && check_permissions && run_harden "$@"
            ;;
        report)
            shift
            check_dependencies && check_permissions && run_report "$@"
            ;;
        deploy)
            shift
            check_dependencies && run_deploy "$@"
            ;;
        check)
            shift
            run_check "$@"
            ;;
        update)
            shift
            run_update "$@"
            ;;
        version|--version|-v)
            show_version
            ;;
        help|--help|-h)
            print_banner
            print_usage
            ;;
        *)
            echo -e "${RED}❌ Unknown command: $1${NC}"
            echo -e "${YELLOW}💡 Use '$0 help' for usage information${NC}"
            exit 1
            ;;
    esac
}

# Run main function with all arguments
main "$@"